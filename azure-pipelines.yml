# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

# do this before all your .NET Core tasks
steps:
- task: DotNetCoreInstaller@0
  inputs:
    version: '2.2.401'

- task: DotNetCoreCLI@2
  displayName: .NET Core Restore
  inputs:
    command: 'restore'
    projects: '$(solution)'
    feedsToUse: 'config'
    nugetConfigPath: './NuGet.Config'

- task: DotNetCoreCLI@2
  displayName: .NET Core Build
  inputs:
    command: build
    projects: '**/message-based-communication.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'


- task: DotNetCoreCLI@2
  displayName: .NET Core NuGet Pack, message-based-communication
  inputs:
    command: 'pack'
    feedsToUse: 'config'
    nugetConfigPath: './NuGet.Config'
    packagesToPack: '**/message-based-communication.csproj'
    nobuild: true
    versioningScheme: 'byPrereleaseNumber'
    majorVersion: '1'
    minorVersion: '0'
    patchVersion: '0'

- task: DotNetCoreCLI@2
  displayName: .NET Core NuGet Push, message-based-communication
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '1f2eafee-a091-46b5-83a5-d2d8542cb765'

#################POSSIBLY NEED A CLEAN CACHE############

- task: DotNetCoreCLI@2
  displayName: .NET Core Build, custom-message-based-implementation
  inputs:
    command: build
    projects: '**/custom-message-based-implementation.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'
- task: DotNetCoreCLI@2
  displayName: .NET Core Build, client-slave-message-communication
  inputs:
    command: build
    projects: '**/client-slave-message-communication.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'
## building of the custom-message-based-implementation & 
## client-slave-communication must be done after the "message-based-communication" have been pushed to git
#- task: DotNetCoreCLI@2
#  displayName: .NET Core NuGet Pack
#  inputs:
#    command: 'pack'
#    feedsToUse: 'config'
#    nugetConfigPath: './NuGet.Config'
#    packagesToPack: '**/protocol.csproj'
#    nobuild: true
#    versioningScheme: 'byPrereleaseNumber'
#    majorVersion: '1'
#    minorVersion: '0'
#    patchVersion: '0'

- task: DotNetCoreCLI@2
  displayName: .NET Core NuGet Pack, packing custom-message-based-implementation
  inputs:
    command: 'pack'
    feedsToUse: 'config'
    nugetConfigPath: './NuGet.Config'
    packagesToPack: '**/custom-message-based-implementation.csproj'
    nobuild: true
    versioningScheme: 'byPrereleaseNumber'
    majorVersion: '1'
    minorVersion: '0'
    patchVersion: '0' 

- task: DotNetCoreCLI@2
  displayName: .NET Core NuGet Pack, packing client-slave-message-communication
  inputs:
    command: 'pack'
    feedsToUse: 'config'
    nugetConfigPath: './NuGet.Config'
    packagesToPack: '**/client-slave-message-communication.csproj'
    nobuild: true
    versioningScheme: 'byPrereleaseNumber'
    majorVersion: '1'
    minorVersion: '0'
    patchVersion: '0' 

#publishing the two newly build nuget packages
- task: DotNetCoreCLI@2
  displayName: .NET Core NuGet Push, custom-message-based-implementation
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/custom-message-based-implementation*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '1f2eafee-a091-46b5-83a5-d2d8542cb765'

- task: DotNetCoreCLI@2
  displayName: .NET Core NuGet Push, client-slave-message-communication
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/client-slave-message-communication*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '1f2eafee-a091-46b5-83a5-d2d8542cb765'